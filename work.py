import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ChatPermissions
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
API_TOKEN = os.getenv('API_TOKEN', '7739860939:AAFvk9wdbdpCJ5L17WSb7YkaORGU09LTsDE')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ChannelSetup(StatesGroup):
    waiting_for_channel = State()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º
CHANNELS = {}

@dp.message(Command('start'))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Æ–ó –∫–∞–Ω–∞–ª–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –û–ü')
    await state.set_state(ChannelSetup.waiting_for_channel)
    logger.info(f"/start –æ—Ç {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")

@dp.message(ChannelSetup.waiting_for_channel)
async def process_channel_username(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    channel_username = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å @
    if not channel_username.startswith('@'):
        channel_username = '@' + channel_username
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
    CHANNELS[chat_id] = channel_username
    await message.answer(f'–ö–∞–Ω–∞–ª {channel_username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {channel_username} –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.')
    await state.clear()
    logger.info(f"–ö–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}: {channel_username} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

@dp.message()
async def check_subscription(message: types.Message):
    # –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id} —Ç–∏–ø–∞ {message.chat.type}")
    
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
    if chat_id not in CHANNELS:
        logger.info(f"–ö–∞–Ω–∞–ª –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        return
    
    channel_id = CHANNELS[chat_id]
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–Ω–∞–ª {channel_id} –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    
    logger.info(f"message_thread_id: {message.message_thread_id}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    if message.chat.type not in ["group", "supergroup"]:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ: {message.chat.type}")
        return
    
    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ {chat_id}")
    user_id = message.from_user.id
    try:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}")
        member = await bot.get_chat_member(channel_id, user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å—Ç–∞—Ç—É—Å –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {member.status}")
        if member.status in ['member', 'administrator', 'creator']:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º")
            return  # –ü–æ–¥–ø–∏—Å–∞–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
            await message.delete()
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} —É–¥–∞–ª–µ–Ω–æ")
            await asyncio.sleep(0.5)
            username = message.from_user.username
            user_mention = f"@{username}" if username else f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è {user_mention}")
            await bot.send_message(
                chat_id=chat_id,
                text=f"üîí {user_mention} —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}"
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            logger.info(f"–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=ChatPermissions(can_send_messages=False)
            )
            logger.info(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ —á–∞—Ç–µ {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}: {str(e)}")

if __name__ == '__main__':
    async def main():
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot)
    asyncio.run(main())
