import logging
import json
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ChatMemberStatus, ChatType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest
import asyncio

API_TOKEN = os.getenv("API_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(storage=MemoryStorage())

DB_FILE = "db.json"

def load_db():
    try:
        with open(DB_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_db(data):
    with open(DB_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

class LinkStates(StatesGroup):
    waiting_for_channel = State()
    waiting_for_group = State()

# /start ‚Äî –ø–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É
@dp.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    await message.answer("üëã –ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ <code>@–Ω–∞–∑–≤–∞_–∫–∞–Ω–∞–ª—É</code>")
    await state.set_state(LinkStates.waiting_for_channel)

# –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–Ω–∞–ª
@dp.message(LinkStates.waiting_for_channel)
async def process_channel(message: types.Message, state: FSMContext):
    channel = message.text.strip()
    if not channel.startswith("@"):
        await message.answer("‚ùó –¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è @–∫–∞–Ω–∞–ª—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return
    await state.update_data(channel=channel)
    await message.answer("üîó –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É —É —Ñ–æ—Ä–º–∞—Ç—ñ <code>https://t.me/–Ω–∞–∑–≤–∞_–≥—Ä—É–ø–∏</code>")
    await state.set_state(LinkStates.waiting_for_group)

# –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä—É–ø—É —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
@dp.message(LinkStates.waiting_for_group)
async def process_group(message: types.Message, state: FSMContext):
    group_link = message.text.strip()
    if not group_link.startswith("https://t.me/"):
        await message.answer("‚ùó –¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≥—Ä—É–ø–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return

    group_username = group_link.replace("https://t.me/", "")
    try:
        group_chat = await bot.get_chat(group_username)
        if group_chat.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
            await message.answer("‚ùå –¶–µ –Ω–µ –≥—Ä—É–ø–∞.")
            return

        data = await state.get_data()
        group_id = str(group_chat.id)
        db = load_db()
        db[group_id] = {
            "required_channel": data["channel"]
        }
        save_db(db)

        await message.answer(
            f"‚úÖ –ü—Ä–∏–≤‚Äô—è–∑–∫–∞ —É—Å–ø—ñ—à–Ω–∞:\n"
            f"–ì—Ä—É–ø–∞: <b>{group_chat.title}</b>\n"
            f"–ö–∞–Ω–∞–ª: {data['channel']}"
        )
        await state.clear()
    except TelegramBadRequest:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≥—Ä—É–ø—É. –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –¥–æ–¥–∞–Ω–∏–π –±–æ—Ç —Ç—É–¥–∏ —è–∫ –∞–¥–º—ñ–Ω.")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –≤ –≥—Ä—É–ø—ñ
@dp.message()
async def check_sub(message: types.Message):
    if message.chat.type not in [ChatType.SUPERGROUP, ChatType.GROUP]:
        return

    db = load_db()
    group_id = str(message.chat.id)

    if group_id not in db:
        return

    required_channel = db[group_id]["required_channel"]
    try:
        member = await bot.get_chat_member(required_channel, message.from_user.id)
        if member.status in [ChatMemberStatus.LEFT, ChatMemberStatus.KICKED]:
            raise Exception("Not subscribed")
    except:
        try:
            await message.delete()
            await message.answer(
                f"üîí –©–æ–± –ø–∏—Å–∞—Ç–∏ –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ, –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ {required_channel}",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(
                            text="üîó –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è",
                            url=f"https://t.me/{required_channel.replace('@', '')}"
                        )]
                    ]
                )
            )
        except:
            pass

# –ó–∞–ø—É—Å–∫
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
