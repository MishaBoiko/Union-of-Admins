import logging
import os
import json
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.types import ChatPermissions
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import F
import asyncio

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = os.getenv('API_TOKEN', 'YOUR_BOT_TOKEN')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

DATA_FILE = Path("db.json")

def load_user_channels():
    if DATA_FILE.exists():
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            logger.warning("‚ö†Ô∏è JSON –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π. –°—Ç–≤–æ—Ä—é—é –Ω–æ–≤–∏–π...")
            DATA_FILE.write_text("{}", encoding="utf-8")
            return {}
    return {}

def save_user_channels(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
        f.flush()

class ChannelSetup(StatesGroup):
    waiting_for_group_id = State()
    waiting_for_channel_username = State()

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    if message.chat.type != "private":
        return await message.reply("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö –±–æ—Ç—É.")
    
    await message.answer("üë• –ü–µ—Ä–µ—à–ª–∏ –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏, –¥–µ –±–æ—Ç –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
    await state.set_state(ChannelSetup.waiting_for_group_id)

@dp.message(ChannelSetup.waiting_for_group_id)
async def process_group_id(message: types.Message, state: FSMContext):
    if not message.forward_from_chat or message.forward_from_chat.type not in ['group', 'supergroup']:
        return await message.reply("‚ùå –¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏.")

    group_id = message.forward_from_chat.id
    await state.update_data(group_id=group_id)
    await state.set_state(ChannelSetup.waiting_for_channel_username)
    await message.answer("üì¢ –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª—É –¥–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, @mychannel).")

@dp.message(ChannelSetup.waiting_for_channel_username)
async def process_channel_username(message: types.Message, state: FSMContext):
    if not message.text.startswith("@"):
        return await message.reply("‚ùå –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —é–∑–µ—Ä–Ω–µ–π–º (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ @).")

    data = await state.get_data()
    group_id = data.get("group_id")
    channel_username = message.text.strip()

    user_channels = load_user_channels()
    user_channels[str(group_id)] = channel_username
    save_user_channels(user_channels)

    await state.clear()
    await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {channel_username} –ø—Ä–∏–≤'—è–∑–∞–Ω–æ –¥–æ –≥—Ä—É–ø–∏ {group_id}!")

@dp.message()
async def check_subscription(message: types.Message):
    if message.chat.type not in ['group', 'supergroup']:
        return

    chat_id = str(message.chat.id)
    user_id = message.from_user.id

    user_channels = load_user_channels()
    if chat_id not in user_channels:
        return

    channel_username = user_channels[chat_id]

    try:
        await bot.get_chat(channel_username)
        member = await bot.get_chat_member(channel_username, user_id)

        if member.status in ['member', 'administrator', 'creator']:
            return

        await message.delete()

        username = message.from_user.username
        mention = f"@{username}" if username else f"–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}"
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"üîí {mention}, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {channel_username}, —â–æ–± –ø–∏—Å–∞—Ç–∏ –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ."
        )

        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_id,
            permissions=ChatPermissions(can_send_messages=False)
        )

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
