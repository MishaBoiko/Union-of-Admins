import asyncio
import json
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest

API_TOKEN = '7739860939:AAFvk9wdbdpCJ5L17WSb7YkaORGU09LTsDE'

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(storage=MemoryStorage())

DB_FILE = "db.json"
if not os.path.exists(DB_FILE):
    with open(DB_FILE, "w") as f:
        json.dump({}, f)

def load_db():
    with open(DB_FILE, "r") as f:
        return json.load(f)

def save_db(data):
    with open(DB_FILE, "w") as f:
        json.dump(data, f, indent=4)

class SetupStates(StatesGroup):
    waiting_for_group = State()
    waiting_for_channel = State()

@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("üîó –í—ñ–¥–ø—Ä–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É:")
    await state.set_state(SetupStates.waiting_for_group)

@dp.message(SetupStates.waiting_for_group)
async def get_group_link(message: Message, state: FSMContext):
    text = message.text.strip()
    if not text.startswith("https://t.me/"):
        await message.answer("‚ùó –ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É —É —Ñ–æ—Ä–º–∞—Ç—ñ https://t.me/–Ω–∞–∑–≤–∞")
        return
    username = text.split("https://t.me/")[1].strip("/")
    try:
        chat = await bot.get_chat(username)
        if not chat.type.endswith("group"):
            await message.answer("‚ö†Ô∏è –¶–µ –Ω–µ –≥—Ä—É–ø–∞!")
            return
        await state.update_data(group_id=chat.id)
        await message.answer("üì¢ –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª:")
        await state.set_state(SetupStates.waiting_for_channel)
    except TelegramBadRequest:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≥—Ä—É–ø—É. –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ—Å–∏–ª–∞–Ω–Ω—è!")

@dp.message(SetupStates.waiting_for_channel)
async def get_channel_link(message: Message, state: FSMContext):
    text = message.text.strip()
    if not text.startswith("https://t.me/"):
        await message.answer("‚ùó –ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ https://t.me/–Ω–∞–∑–≤–∞")
        return
    username = text.split("https://t.me/")[1].strip("/")
    try:
        chat = await bot.get_chat(username)
        if chat.type != "channel":
            await message.answer("‚ö†Ô∏è –¶–µ –Ω–µ –∫–∞–Ω–∞–ª!")
            return
        data = await state.get_data()
        group_id = str(data["group_id"])
        db = load_db()
        db[group_id] = {"required_channel": f"@{username}"}
        save_db(db)
        await message.answer(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–≤'—è–∑–∞–≤ –∫–∞–Ω–∞–ª @{username} –¥–æ –≥—Ä—É–ø–∏!")
        await state.clear()
    except TelegramBadRequest:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª. –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ—Å–∏–ª–∞–Ω–Ω—è!")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
